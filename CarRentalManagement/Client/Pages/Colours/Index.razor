@page "/colours/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]

<h3 class="card-title">Colour</h3>
<br />
<a href="/colours/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New Colour
</a>
<br />
<br />

@if (Colours== null)
{
    <div class="alert alert-info"> Loading colours...</div>
}
else
{
    <table class="table table-responsive">
        <thead>
            <tr>
                <th>Name</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var colour in Colours)
            {
                <tr>
                    <td>@colour.Name</td>
                    <td>
                        <a href="/colours/view/@colour.ID" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                        <a href="colours/edit/@colour.ID" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="@(()=>Delete(colour.ID))">
                            <span class="oi oi-delete"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Colour>? Colours;
    protected async override Task OnInitializedAsync()
    {
        Colours= await _client.GetFromJsonAsync<List<Colour>>($"{Endpoints.ColoursEndpoint}");
    }

    async Task Delete(int colourID)
    {
        if (Colours!= null)
        {
            var colour = Colours.First(q => q.ID == colourID);
            var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {colour.Name}?");
            if (confirm)
            {
                await _client.DeleteAsync($"{Endpoints.ColoursEndpoint}/{colourID}");
                await OnInitializedAsync();
            }
        }
    }
}
